
# NOTE: this file is automatically generated

from iommi import *
from iommi.admin import Admin
from iommi.struct import Struct
from django.urls import (
    include,
    path,
)
import pytest
from django.db import models
from tests.helpers import req, user_req, staff_req, show_output
from docs.models import *

pytestmark = pytest.mark.django_db

@pytest.fixture(autouse=True)
def auto_use(big_discography):
    pass

request = req('get')


# language=rst
"""
    
Endpoint
========

Base class: :doc:`Traversable`

"""
def test_base():
    # language=rst
    """
Class that describes an endpoint in iommi. You can create your own custom
endpoints on any :doc:`Part`.

An endpoint can return an `HttpResponse` directly, or a `Part` (which is
rendered for you); everything else we try to dump to json for you.

Example:

    """

    def my_view(request):
        return Page(
            parts__h1=html.h1('Hi!'),
            endpoints__echo__func=lambda value, **_: value,
        )

    # @test
    import json
    request = req('get', **{'/echo': 'foo'})
    response = my_view(request).bind(request=request).render_to_response()
    assert json.loads(response.content) == 'foo'
    # @end

    # language=rst
    """
    This page will respond to `?/echo=foo` by returning a json response `"foo"`.

    """

    # language=rst
    """

Refinable members
-----------------


`extra_params`
^^^^^^^^^^^^^^

    See :ref:`extra_params <extra_params>`


`func`
^^^^^^

Type: `Callable`


`include`       (:ref:`evaluated <evaluate>`)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Type: `bool`

Default: `True`
    See :ref:`include <include>`


`iommi_style`
^^^^^^^^^^^^^

Type: `str`

    See :ref:`iommi_style <iommi_style>`


Methods
-------

`on_bind`
^^^^^^^^^

`own_evaluate_parameters`
^^^^^^^^^^^^^^^^^^^^^^^^^

    """
